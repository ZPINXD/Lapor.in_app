import 'dart:async';
import 'dart:io';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

class DatabaseHelper {
  // Singleton instance
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;
  static bool _isInitialized = false;

  // Getter untuk database
  Future<Database> get database async {
    if (!_isInitialized) {
      _database = await _initDatabase();
      _isInitialized = true;
    } else if (_database == null) {
      _database = await _initDatabase();
    }

    return _database!;
  }

  // Delete the database file
  Future<void> deleteDatabaseFile() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'laporin.db');
    final file = File(path);
    if (await file.exists()) {
      try {
        await file.delete();
      } catch (e) {
        // ignore error
      }
    }
  }

  // Verifikasi integritas database
  Future<void> _verifyDatabaseIntegrity(Database db) async {
    try {
      final tables = await db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'");
      final requiredTables = ['provinces', 'cities', 'categories', 'agencies', 'users', 'reports'];

      if (!tables.any((t) => t['name'] == 'landing_images')) {
        await db.execute('''
          CREATE TABLE landing_images (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            imagePath TEXT NOT NULL
          )
        ''');
        await db.insert('landing_images', {'imagePath': 'assets/image_landpage1.jpg'});
        await db.insert('landing_images', {'imagePath': 'assets/image_landpage2.jpg'});
        await db.insert('landing_images', {'imagePath': 'assets/image_landpage3.jpg'});
      }

      for (final table in requiredTables) {
        if (!tables.any((t) => t['name'] == table)) {
          throw Exception('Tabel $table tidak ditemukan');
        }
      }

      final provinceCount = Sqflite.firstIntValue(await db.rawQuery('SELECT COUNT(*) FROM provinces'));
      final cityCount = Sqflite.firstIntValue(await db.rawQuery('SELECT COUNT(*) FROM cities'));

      if (provinceCount == 0 || cityCount == 0) {
        await _reinitializeDatabase(db);
      }
    } catch (e) {
      await _reinitializeDatabase(db);
    }
  }

  // Reinisialisasi database jika terjadi masalah
  Future<void> _reinitializeDatabase(Database db) async {
    await _onCreate(db, 1);
  }

  // Inisialisasi database
  Future<Database> _initDatabase() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'laporin.db');

    await Directory(dirname(path)).create(recursive: true);

    final db = await openDatabase(
      path,
      version: 3,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
      onConfigure: (db) async {
        await db.execute('PRAGMA foreign_keys = ON');
      },
    );
    return db;
  }

  // Upgrade database schema
  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 2) {
      await db.execute('ALTER TABLE users ADD COLUMN image_path TEXT');
    }
    if (oldVersion < 3) {
      await db.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          report_id INTEGER NOT NULL,
          message TEXT NOT NULL,
          is_read INTEGER DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id),
          FOREIGN KEY (report_id) REFERENCES reports (id)
        )
      ''');

      try {
        await db.execute('ALTER TABLE donations ADD COLUMN name TEXT');
      } catch (e) {
        // ignore error
      }

      await _createDonationsTable(db);
    }
  }

  // Fungsi untuk mengecek apakah kolom ada di tabel
  Future<bool> _columnExists(Database db, String tableName, String columnName) async {
    final result = await db.rawQuery("PRAGMA table_info($tableName)");
    for (final row in result) {
      if (row['name'] == columnName) {
        return true;
      }
    }
    return false;
  }

  // Create database schema
  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE provinces (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
      )
    ''');

    await _insertInitialProvinces(db);

    await db.execute('''
      CREATE TABLE cities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        province_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        FOREIGN KEY (province_id) REFERENCES provinces (id)
      )
    ''');

    await _insertInitialCities(db);

    await _createOtherTables(db);

    await _createDonationsTable(db);
  }

  Future<void> _createOtherTables(Database db) async {
    await db.execute('''
      CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        address TEXT NOT NULL,
        gender TEXT NOT NULL,
        phone TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        image_path TEXT
      )
    ''');

    await db.execute('''
      CREATE TABLE categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE agencies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE landing_images (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        imagePath TEXT NOT NULL
      )
    ''');

    final defaultImages = [
      'assets/images/image_landpage1.jpg',
      'assets/images/image_landpage2.jpg',
      'assets/images/image_landpage3.jpg'
    ];

    for (var path in defaultImages) {
      await db.insert('landing_images', {'imagePath': path});
    }

    await db.execute('''
      CREATE TABLE reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        province_id INTEGER NOT NULL,
        city_id INTEGER NOT NULL,
        address TEXT NOT NULL,
        category_id INTEGER NOT NULL,
        agency_id INTEGER NOT NULL,
        image_path TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_anonymous INTEGER DEFAULT 0,
        status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'proses', 'selesai', 'dibatalkan')),
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (province_id) REFERENCES provinces (id),
        FOREIGN KEY (city_id) REFERENCES cities (id),
        FOREIGN KEY (category_id) REFERENCES categories (id),
        FOREIGN KEY (agency_id) REFERENCES agencies (id)
      )
    ''');

    await db.insert('categories', {'name': 'Bencana'});
    await db.insert('categories', {'name': 'Aduan'});

    final agencies = [
      'Polisi',
      'Pemadam Kebakaran',
      'Dinas Sosial',
      'BPBD',
      'Dinas Kesehatan',
      'Dinas Perhubungan',
    ];

    for (String agency in agencies) {
      await db.insert('agencies', {'name': agency});
    }

    await db.execute('''
      CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        report_id INTEGER NOT NULL,
        message TEXT NOT NULL,
        is_read INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (report_id) REFERENCES reports (id)
      )
    ''');
  }

  Future<void> _createDonationsTable(Database db) async {
    await db.execute('''
      CREATE TABLE donations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        report_id INTEGER NOT NULL,
        nominal INTEGER NOT NULL,
        pesan TEXT,
        name TEXT,
        metode_pembayaran TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (report_id) REFERENCES reports (id)
      )
    ''');
  }

  // Insert donation
  Future<int> insertDonation(Map<String, dynamic> donation) async {
    Database db = await instance.database;
    return await db.insert('donations', donation);
  }

  // Get donations by report
  Future<List<Map<String, dynamic>>> getDonationsByReport(int reportId) async {
    Database db = await instance.database;
    return await db.query(
      'donations',
      where: 'report_id = ?',
      whereArgs: [reportId],
      orderBy: 'created_at DESC',
    );
  }

  // Get donations by user
  Future<List<Map<String, dynamic>>> getDonationsByUser(int userId) async {
    Database db = await instance.database;
    return await db.query(
      'donations',
      where: 'user_id = ?',
      whereArgs: [userId],
      orderBy: 'created_at DESC',
    );
  }

  // Get total donations by report
  Future<int> getTotalDonationsByReport(int reportId) async {
    Database db = await instance.database;
    final result = await db.rawQuery(
      'SELECT SUM(nominal) as total FROM donations WHERE report_id = ?',
      [reportId],
    );
    return result.first['total'] != null ? result.first['total'] as int : 0;
  }

  Future<void> _insertInitialCities(Database db) async {
    try {
      print('Starting to insert cities...');

      final cities = [
        // Jawa Timur (id: 15)
        {'id': 1, 'province_id': 15, 'name': 'Surabaya'},
        {'id': 2, 'province_id': 15, 'name': 'Malang'},
        {'id': 3, 'province_id': 15, 'name': 'Sidoarjo'},
        {'id': 4, 'province_id': 15, 'name': 'Gresik'},
        {'id': 5, 'province_id': 15, 'name': 'Mojokerto'},

        // DKI Jakarta (id: 11)
        {'id': 6, 'province_id': 11, 'name': 'Jakarta Pusat'},
        {'id': 7, 'province_id': 11, 'name': 'Jakarta Utara'},
        {'id': 8, 'province_id': 11, 'name': 'Jakarta Barat'},
        {'id': 9, 'province_id': 11, 'name': 'Jakarta Selatan'},
        {'id': 10, 'province_id': 11, 'name': 'Jakarta Timur'},

        // Jawa Barat (id: 12)
        {'id': 11, 'province_id': 12, 'name': 'Bandung'},
        {'id': 12, 'province_id': 12, 'name': 'Bekasi'},
        {'id': 13, 'province_id': 12, 'name': 'Depok'},
        {'id': 14, 'province_id': 12, 'name': 'Bogor'},
        {'id': 15, 'province_id': 12, 'name': 'Cimahi'},
      ];

      // Insert cities in batch
      final batch = db.batch();
      for (final city in cities) {
        batch.insert('cities', city);
      }
      await batch.commit(noResult: true);

      // Verify insertion
      final count = Sqflite.firstIntValue(await db.rawQuery('SELECT COUNT(*) FROM cities'));
      print('Cities inserted: $count');

      // Verify foreign key relationships
      final cityCheck = await db.rawQuery('''
        SELECT c.name as city, p.name as province 
        FROM cities c 
        JOIN provinces p ON c.province_id = p.id 
        LIMIT 1
      ''');
      print('City-Province relationship check: ${cityCheck.first}');

    } catch (e) {
      print('Error inserting cities: $e');
      rethrow;
    }
  }

  Future<void> _insertInitialProvinces(Database db) async {
    try {
      print('Starting to insert provinces...');

      final provinces = [
        {'id': 1, 'name': 'Aceh'},
        {'id': 2, 'name': 'Sumatera Utara'},
        {'id': 3, 'name': 'Sumatera Barat'},
        {'id': 4, 'name': 'Riau'},
        {'id': 5, 'name': 'Jambi'},
        {'id': 6, 'name': 'Sumatera Selatan'},
        {'id': 7, 'name': 'Bengkulu'},
        {'id': 8, 'name': 'Lampung'},
        {'id': 9, 'name': 'Kepulauan Bangka Belitung'},
        {'id': 10, 'name': 'Kepulauan Riau'},
        {'id': 11, 'name': 'DKI Jakarta'},
        {'id': 12, 'name': 'Jawa Barat'},
        {'id': 13, 'name': 'Jawa Tengah'},
        {'id': 14, 'name': 'DI Yogyakarta'},
        {'id': 15, 'name': 'Jawa Timur'},
        {'id': 16, 'name': 'Banten'},
        {'id': 17, 'name': 'Bali'},
        {'id': 18, 'name': 'Nusa Tenggara Barat'},
        {'id': 19, 'name': 'Nusa Tenggara Timur'},
        {'id': 20, 'name': 'Kalimantan Barat'},
        {'id': 21, 'name': 'Kalimantan Tengah'},
        {'id': 22, 'name': 'Kalimantan Selatan'},
        {'id': 23, 'name': 'Kalimantan Timur'},
        {'id': 24, 'name': 'Kalimantan Utara'},
        {'id': 25, 'name': 'Sulawesi Utara'},
        {'id': 26, 'name': 'Sulawesi Tengah'},
        {'id': 27, 'name': 'Sulawesi Selatan'},
        {'id': 28, 'name': 'Sulawesi Tenggara'},
        {'id': 29, 'name': 'Gorontalo'},
        {'id': 30, 'name': 'Sulawesi Barat'},
        {'id': 31, 'name': 'Maluku'},
        {'id': 32, 'name': 'Maluku Utara'},
        {'id': 33, 'name': 'Papua'},
        {'id': 34, 'name': 'Papua Barat'}
      ];

      // Insert provinces in batch
      final batch = db.batch();
      for (final province in provinces) {
        batch.insert('provinces', province);
      }
      await batch.commit(noResult: true);

      // Verify insertion
      final count = Sqflite.firstIntValue(await db.rawQuery('SELECT COUNT(*) FROM provinces'));
      print('Provinces inserted: $count');

    } catch (e) {
      print('Error inserting provinces: $e');
      rethrow;
    }
  }

  // Fungsi untuk registrasi user baru
  Future<int> registerUser(Map<String, dynamic> row) async {
    Database db = await instance.database;
    print('Attempting to register user with data: $row'); // Debug print

    try {
      final id = await db.insert('users', row);
      print('User registered successfully with id: $id'); // Debug print

      // Verify user was inserted
      final user = await getUserByEmail(row['email'] as String);
      print('Newly registered user data: $user'); // Debug print

      return id;
    } catch (error) {
      print('Error registering user: $error'); // Debug print
      throw Exception('Gagal mendaftarkan user: $error');
    }
  }

  // Fungsi untuk mendapatkan user berdasarkan email
  Future<Map<String, dynamic>?> getUserByEmail(String email) async {
    Database db = await instance.database;
    print('Querying database for email: $email'); // Debug print

    List<Map<String, dynamic>> results = await db.query(
      'users',
      where: 'email = ?',
      whereArgs: [email],
    );

    print('Query results: $results'); // Debug print

    if (results.isNotEmpty) {
      print('User found: ${results.first}'); // Debug print
      return results.first;
    } else {
      print('No user found for email: $email'); // Debug print
      return null;
    }
  }

  // Fungsi untuk menyimpan email user yang sedang login
  static String? _currentUserEmail;

  void setCurrentUserEmail(String? email) {
    _currentUserEmail = email;
  }

  Future<Map<String, dynamic>?> getCurrentUser() async {
    if (_currentUserEmail != null) {
      final user = await getUserByEmail(_currentUserEmail!);
      print('Current user data: $user'); // Debug print
      return user;
    }
    print('No current user email found'); // Debug print
    return null;
  }

  // Fungsi untuk mendapatkan semua provinsi
  Future<List<Map<String, dynamic>>> getAllProvinces() async {
    try {
      final db = await instance.database;

      // Verifikasi tabel provinces
      final tableCheck = await db.rawQuery("SELECT name FROM sqlite_master WHERE type='table' AND name='provinces'");
      if (tableCheck.isEmpty) {
        throw Exception('Tabel provinces tidak ditemukan');
      }

      // Ambil data dengan verifikasi
      final provinces = await db.query('provinces', orderBy: 'name');
      print('Provinces fetched: ${provinces.length}');

      if (provinces.isEmpty) {
        print('Warning: No provinces found in database');
      }

      return provinces;
    } catch (e) {
      print('Error getting provinces: $e');
      rethrow;
    }
  }

  // Fungsi untuk mendapatkan kota berdasarkan provinsi
  Future<List<Map<String, dynamic>>> getCitiesByProvince(int provinceId) async {
    try {
      final db = await instance.database;

      // Verifikasi provinsi exists
      final provinceCheck = await db.query(
        'provinces',
        where: 'id = ?',
        whereArgs: [provinceId],
      );

      if (provinceCheck.isEmpty) {
        throw Exception('Provinsi dengan ID $provinceId tidak ditemukan');
      }

      // Ambil data kota
      final cities = await db.query(
          'cities',
          where: 'province_id = ?',
          whereArgs: [provinceId],
          orderBy: 'name'
      );

      print('Cities fetched for province $provinceId: ${cities.length}');

      return cities;
    } catch (e) {
      print('Error getting cities: $e');
      rethrow;
    }
  }

  // Fungsi untuk mendapatkan laporan berdasarkan user
  Future<List<Map<String, dynamic>>> getReportsByUser(int userId) async {
    Database db = await instance.database;
    return await db.query(
        'reports',
        where: 'user_id = ?',
        whereArgs: [userId],
        orderBy: 'created_at DESC'
    );
  }

  // Fungsi untuk mendapatkan semua laporan (untuk admin/publik)
  // Fungsi untuk mendapatkan semua kategori
  Future<List<Map<String, dynamic>>> getAllCategories() async {
    Database db = await instance.database;
    return await db.query('categories', orderBy: 'name');
  }

  // Fungsi untuk mendapatkan semua instansi
  Future<List<Map<String, dynamic>>> getAllAgencies() async {
    Database db = await instance.database;
    return await db.query('agencies', orderBy: 'name');
  }

  // Fungsi untuk membuat laporan baru
  Future<Map<String, dynamic>> createReport({
    required int userId,
    required String title,
    required String description,
    required int provinceId,
    required int cityId,
    required String address,
    required int categoryId,
    required int agencyId,
    String? imagePath,
    required bool isAnonymous,
  }) async {
    Database db = await instance.database;

    try {
      // Begin transaction
      await db.transaction((txn) async {
        final reportData = {
          'user_id': userId,
          'title': title,
          'description': description,
          'province_id': provinceId,
          'city_id': cityId,
          'address': address,
          'category_id': categoryId,
          'agency_id': agencyId,
          'image_path': imagePath,
          'is_anonymous': isAnonymous ? 1 : 0,
          'status': 'pending',
          'created_at': DateTime.now().toIso8601String(),
        };

        print('Creating report with data: $reportData');

        // Insert report
        final id = await txn.insert('reports', reportData);
        print('Report created successfully with id: $id');

        // Insert notification for the new report
        final notificationMessage = 'Laporan "$title" berhasil dibuat';
        await txn.insert('notifications', {
          'user_id': userId,
          'report_id': id,
          'message': notificationMessage,
          'is_read': 0,
          'created_at': DateTime.now().toIso8601String(),
        });

        // Fetch complete report data
        final reports = await txn.rawQuery('''
          SELECT 
            r.*,
            CASE 
              WHEN r.is_anonymous = 1 THEN 'Anonymous'
              ELSE u.name
            END as reporter_name,
            p.name as province_name,
            c.name as city_name,
            cat.name as category_name,
            a.name as agency_name,
            strftime('%d/%m/%Y %H:%M', r.created_at) as formatted_date
          FROM reports r
          LEFT JOIN users u ON r.user_id = u.id
          LEFT JOIN provinces p ON r.province_id = p.id
          LEFT JOIN cities c ON r.city_id = c.id
          LEFT JOIN categories cat ON r.category_id = cat.id
          LEFT JOIN agencies a ON r.agency_id = a.id
          WHERE r.id = ?
        ''', [id]);

        if (reports.isEmpty) {
          throw Exception('Report created but data not found');
        }

        return reports.first;
      });

      // Get the complete report data outside transaction
      final reports = await db.rawQuery('''
        SELECT 
          r.*,
          CASE 
            WHEN r.is_anonymous = 1 THEN 'Anonymous'
            ELSE u.name
          END as reporter_name,
          p.name as province_name,
          c.name as city_name,
          cat.name as category_name,
          a.name as agency_name,
          strftime('%d/%m/%Y %H:%M', r.created_at) as formatted_date
        FROM reports r
        LEFT JOIN users u ON r.user_id = u.id
        LEFT JOIN provinces p ON r.province_id = p.id
        LEFT JOIN cities c ON r.city_id = c.id
        LEFT JOIN categories cat ON r.category_id = cat.id
        LEFT JOIN agencies a ON r.agency_id = a.id
        WHERE r.id = (SELECT MAX(id) FROM reports WHERE user_id = ?)
      ''', [userId]);

      return reports.first;
    } catch (e) {
      print('Error creating report: $e');
      throw Exception('Gagal membuat laporan: $e');
    }
  }

  Future<List<Map<String, dynamic>>> getAllReports({
    bool includeAnonymous = true,
    int? categoryId,
    String? status,
    List<String>? statuses,
    DateTime? date,
  }) async {
    Database db = await instance.database;
    List<String> conditions = [];
    List<dynamic> args = [];

    String query = '''
      SELECT 
        r.*,
        u.image_path as user_image_path,
        CASE 
          WHEN r.is_anonymous = 1 THEN 'Anonymous'
          ELSE u.name
        END as reporter_name,
        p.name as province_name,
        c.name as city_name,
        cat.name as category_name,
        a.name as agency_name,
        strftime('%d/%m/%Y %H:%M', r.created_at) as formatted_date
      FROM reports r
      LEFT JOIN users u ON r.user_id = u.id
      LEFT JOIN provinces p ON r.province_id = p.id
      LEFT JOIN cities c ON r.city_id = c.id
      LEFT JOIN categories cat ON r.category_id = cat.id
      LEFT JOIN agencies a ON r.agency_id = a.id
    ''';

    if (!includeAnonymous) {
      conditions.add('r.is_anonymous = 0');
    }

    if (categoryId != null) {
      conditions.add('r.category_id = ?');
      args.add(categoryId);
    }

    if (status != null) {
      conditions.add('r.status = ?');
      args.add(status);
    }

    if (statuses != null && statuses.isNotEmpty) {
      final placeholders = List.filled(statuses.length, '?').join(', ');
      conditions.add('r.status IN ($placeholders)');
      args.addAll(statuses);
    }

    if (date != null) {
      conditions.add("date(r.created_at) = date(?)");
      args.add(date.toIso8601String());
    }

    if (conditions.isNotEmpty) {
      query += ' WHERE ' + conditions.join(' AND ');
    }

    query += ' ORDER BY r.created_at DESC';

    try {
      final result = await db.rawQuery(query, args);
      print('Reports fetched: ${result.length}');
      return result;
    } catch (e) {
      print('Error fetching reports: $e');
      rethrow;
    }
  }

  // Fungsi untuk mengupdate status laporan
  Future<int> updateReportStatus(int reportId, String status) async {
    Database db = await instance.database;
    try {
      // Update the report status
      int count = await db.update(
        'reports',
        {'status': status},
        where: 'id = ?',
        whereArgs: [reportId],
      );

      if (count > 0) {
        // Fetch report details to get user_id and title
        final reportList = await db.query(
          'reports',
          columns: ['user_id', 'title'],
          where: 'id = ?',
          whereArgs: [reportId],
          limit: 1,
        );

        if (reportList.isNotEmpty) {
          final report = reportList.first;
          final userId = report['user_id'] as int;
          final title = report['title'] as String;

          // Create notification message
          final notificationMessage = 'Status laporan "$title" telah diubah menjadi $status';

          // Insert notification for the user
          await db.insert('notifications', {
            'user_id': userId,
            'report_id': reportId,
            'message': notificationMessage,
            'is_read': 0,
            'created_at': DateTime.now().toIso8601String(),
          });
        }
      }

      return count;
    } catch (e) {
      print('Error updating report status: $e');
      rethrow;
    }
  }

  // Fungsi untuk mendapatkan user berdasarkan nomor telepon
  Future<Map<String, dynamic>?> getUserByPhone(String phone) async {
    Database db = await instance.database;
    List<Map<String, dynamic>> results = await db.query(
      'users',
      where: 'phone = ?',
      whereArgs: [phone],
    );
    return results.isNotEmpty ? results.first : null;
  }

  // Fungsi untuk mengelola landing images
  Future<List<Map<String, dynamic>>> getLandingImages() async {
    Database db = await instance.database;
    return await db.query('landing_images', orderBy: 'id');
  }

  Future<int> insertLandingImage(String imagePath) async {
    Database db = await instance.database;
    try {
      // Check image count
      final count = Sqflite.firstIntValue(await db.rawQuery('SELECT COUNT(*) FROM landing_images'));
      if (count! >= 5) {
        throw Exception('Maksimal 5 gambar yang diperbolehkan');
      }

      // Verify the image exists if it's a file path
      if (!imagePath.startsWith('assets/')) {
        final file = File(imagePath);
        if (!await file.exists()) {
          throw Exception('File gambar tidak ditemukan');
        }
      }

      return await db.insert('landing_images', {'imagePath': imagePath});
    } catch (e) {
      print('Error inserting landing image: $e');
      rethrow;
    }
  }

  Future<int> updateLandingImage(int id, String newPath) async {
    Database db = await instance.database;
    try {
      // Get old image path
      final oldImage = await db.query(
        'landing_images',
        where: 'id = ?',
        whereArgs: [id],
      );

      if (oldImage.isNotEmpty) {
        final oldPath = oldImage.first['imagePath'] as String;
        if (!oldPath.startsWith('assets/')) {
          final oldFile = File(oldPath);
          if (await oldFile.exists()) {
            await oldFile.delete();
          }
        }
      }

      return await db.update(
        'landing_images',
        {'imagePath': newPath},
        where: 'id = ?',
        whereArgs: [id],
      );
    } catch (e) {
      print('Error updating landing image: $e');
      rethrow;
    }
  }

  Future<int> deleteLandingImage(int id) async {
    Database db = await instance.database;
    try {
      // Get image path before deleting
      final image = await db.query(
        'landing_images',
        where: 'id = ?',
        whereArgs: [id],
      );

      if (image.isNotEmpty) {
        final imagePath = image.first['imagePath'] as String;
        if (!imagePath.startsWith('assets/')) {
          final file = File(imagePath);
          if (await file.exists()) {
            await file.delete();
          }
        }
      }

      return await db.delete(
        'landing_images',
        where: 'id = ?',
        whereArgs: [id],
      );
    } catch (e) {
      print('Error deleting landing image: $e');
      rethrow;
    }
  }

  // Fungsi untuk validasi login
  Future<bool> validateUser(String email, String password) async {
    Database db = await instance.database;
    print('Validating user login for email: $email'); // Debug print

    // Print all users in database for debugging
    final allUsers = await db.query('users');
    print('All users in database: $allUsers'); // Debug print

    List<Map<String, dynamic>> results = await db.query(
      'users',
      where: 'email = ? AND password = ?',
      whereArgs: [email, password],
    );

    print('Login query results: $results'); // Debug print

    if (results.isNotEmpty) {
      print('Login successful for email: $email'); // Debug print
      setCurrentUserEmail(email);
      print('Current user email set to: $_currentUserEmail'); // Debug print

      // Verify user data is accessible
      final userData = await getCurrentUser();
      print('Current user data after login: $userData'); // Debug print

      return true;
    }

    print('Login failed for email: $email'); // Debug print
    return false;
  }

  // Fungsi untuk mengupdate password user
  Future<bool> updatePassword(String email, String newPassword) async {
    Database db = await instance.database;
    try {
      // Dapatkan password lama
      final user = await getUserByEmail(email);
      if (user == null) {
        return false;
      }

      // Cek apakah password baru sama dengan password lama
      if (user['password'] == newPassword) {
        throw Exception('Password baru tidak boleh sama dengan password lama');
      }

      int count = await db.update(
        'users',
        {'password': newPassword},
        where: 'email = ?',
        whereArgs: [email],
      );
      return count > 0;
    } catch (e) {
      print('Error updating password: $e');
      return false;
    }
  }

  // Fungsi untuk mengupdate profil user
  Future<bool> updateUserProfile(String email, Map<String, dynamic> updates) async {
    Database db = await instance.database;
    try {
      int count = await db.update(
        'users',
        updates,
        where: 'email = ?',
        whereArgs: [email],
      );
      return count > 0;
    } catch (e) {
      print('Error updating user profile: $e');
      return false;
    }
  }

  // Get notifications by user
  Future<List<Map<String, dynamic>>> getNotificationsByUser(int userId) async {
    Database db = await instance.database;
    return await db.query(
      'notifications',
      where: 'user_id = ?',
      whereArgs: [userId],
      orderBy: 'created_at DESC',
    );
  }

  // Mark all notifications as read for a user  
  Future<void> markAllNotificationsAsRead(int userId) async {
    Database db = await instance.database;
    await db.update(
      'notifications',
      {'is_read': 1},
      where: 'user_id = ?',
      whereArgs: [userId],
    );
  }

  // Get count of unread notifications for a user
  Future<int> getUnreadNotificationCount(int userId) async {
    Database db = await instance.database;
    final result = await db.rawQuery(
      'SELECT COUNT(*) as count FROM notifications WHERE user_id = ? AND is_read = 0',
      [userId],
    );
    return result.first['count'] != null ? result.first['count'] as int : 0;
  }
}
